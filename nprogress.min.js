;(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define(factory)
    } else if (typeof exports === 'object') {
        module.exports = factory()
    } else {
        root.NProgress = factory()
    }
})(this, function () {
    const NProgress = {}

    const Config = NProgress.config = {
        auto: true,
        speed: 200,
        trickleSpeed: 200,
        minimum: 0.08,
        ease: 'linear',
        template: `
        <div class="bar" roll="bar">
            <div class="peg"></div>
        </div>
        <div class="spinner" role="spinner">
            <div class="spinner-icon"></div>
        </div>
        `
    }

    NProgress.status = null
    const SINGLE_BLANK_SPACE = ' '

    NProgress.setConfig = function (config) {
        let key, value
        for (key in config) {
            value = config[key]
            if (value !== undefined && Config.hasOwnProperty(key)) Config[key] = value
        }
        
        return this
    }

    NProgress.start = function () {
        if (!NProgress.status) NProgress._run(0)

        const walk = () => {
            setTimeout(() => {
                if (NProgress.status == null) return
                NProgress._trickle()
                walk()
            }, Config.trickleSpeed)
        }

        if (Config.auto) walk()
    }

    NProgress.done = function () {
        if (!NProgress.status) return this

        return NProgress.inc(0.3 + 0.5 * Math.random()).set(1)
    }

    NProgress._trickle = function () {
        return NProgress.inc()
    }

    // 生成一个进度条实例
    NProgress.inc = function (amount) {
        let n = NProgress.status
        if (!n) {
            return NProgress.start()
        } else if (n > 1) {
            return
        } else {
            if (typeof amount !== 'number') {
                // 设置默认运行频率
                if (n >= 0 && n < 0.2) amount = 0.1
                else if (n >= 0.2 && n < 0.5) amount = 0.04
                else if (n >= 0.5 && n < 0.8) amount = 0.02
                else if (n >= 0.8 && n < 0.99) amount = 0.005
                else amount = 0
            }

            n = _clamp(n + amount, 0, 0.994)
            return NProgress.set(n)
        }
    }

    // 运行函数
    NProgress.set = NProgress._run = function (n) {
        n = _clamp(n, Config.minimum, 1)
        NProgress.status = (n === 1) ? null : n

        const progress = NProgress._render(),
              bar = progress.querySelector('.bar'),
              speed = Config.speed,
              trickleSpeed = Config.trickleSpeed,
              easeing = Config.ease,
              barPerc = _toBarPerc(n)

        progress.offsetWidth // 触发一次重绘，保证过渡能够生效

        _css(bar, {
            transform: 'translate3d(' + barPerc + '%, 0, 0)',
            transition: 'all ' + speed + 'ms ' + easeing
        })

        if (n === 1) {
            _css(progress, {
                transition: 'none',
                opacity: 1
            })

            progress.offsetWidth // 触发一次重绘，保证后面的过渡能够生效

            // 使用两次 setTimeout 是为了能够显示完整个进度条之后再撤销
            setTimeout(() => {
                _css(progress, {
                    transition: 'all ' + speed + 'ms linear',
                    opacity: 0
                })
                setTimeout(() => {
                    NProgress._remove()
                }, speed)
            }, speed)
        }

        return this // 实现链式调用
    }

    NProgress._remove = function () {
        _removeClass(document.documentElement, 'nprogress-busy')
        const progress = document.getElementById('nprogress')
        progress && _removeElement(progress)
    }

    // 渲染函数
    NProgress._render = function () {
        if (NProgress._isRendered()) return document.getElementById('nprogress')

        _addClass(document.documentElement, 'nprogress-busy')

        const progress = document.createElement('div')
        progress.id = 'nprogress'
        progress.innerHTML = Config.template

        const bar = progress.querySelector('.bar')
        _css(bar, {
            transform: 'translate3d(-100%, 0, 0)',
            transition: 'all 0 ' + Config.ease
        })

        document.body.appendChild(progress)
        return progress
    }

    NProgress._isRendered = () => !!document.getElementById('nprogress')

    // 工具函数

    var _css = (function () {
        // 将中横线命名的css属性名转成驼峰
        const camelCase = (name) => name.replace(/^-ms-/, 'ms-').replace(/-([\da-z])/gi, (match, letter) => letter.toUpperCase())

        return function (el, props) {
            for (const key in props) {
                const name = camelCase(key),
                      value = props[name]

                el.style[name] = value
            }
        }
    })()

    // 获取元素的类，并利用空格将类名分开
    function _getClassList(el) {
        return SINGLE_BLANK_SPACE + (el.className && el.className.replace(/\s+/g, SINGLE_BLANK_SPACE)) + SINGLE_BLANK_SPACE
    }

    function _addClass(el, name) {
        const oldClass = _getClassList(el)
        if (_hasClass(oldClass, name)) return
        el.className = (oldClass + name).trim() // 去掉开头和结尾的空格
    }

    function _removeClass(el, name) {
        const oldClass = _getClassList(el)
        if (!_hasClass(oldClass, name)) return
        el.className = oldClass.replace(SINGLE_BLANK_SPACE + name + SINGLE_BLANK_SPACE, SINGLE_BLANK_SPACE).trim()
    }

    function _removeElement(el) {
        return el.parentNode && el.parentNode.removeChild(el)
    }

    function _hasClass(classList, name) {
        return classList.includes(SINGLE_BLANK_SPACE + name + SINGLE_BLANK_SPACE)
    }

    function _clamp(n, min, max) {
        if (n < min) return min
        if (n > max) return max
        return n
    }

    function _toBarPerc(n) {
        return (-1 + n) * 100
    }

    return NProgress
})